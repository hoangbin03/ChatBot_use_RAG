import faiss
import numpy as np
import json
import os
import speech_recognition as sr
from gtts import gTTS
from sentence_transformers import SentenceTransformer
from gradio_client import Client
from sklearn.metrics.pairwise import cosine_similarity


def initialize_components():
    """Kh·ªüi t·∫°o c√°c th√†nh ph·∫ßn: FAISS, Sentence Transformer, t√†i li·ªáu v√† k·∫øt n·ªëi Gradio Client."""
    # Load Sentence Transformer model
    sentence_model = SentenceTransformer('sentence-transformers/all-MiniLM-L6-v2')

    # Load t√†i li·ªáu
    with open("vectorstores/documents.json", 'r', encoding='utf-8') as f:
        documents = json.load(f)

    # Load FAISS index
    vector_db_path = "vectorstores/db_faiss"
    index = faiss.read_index(vector_db_path)

    # K·∫øt n·ªëi Gradio Client (thay ƒë·ªïi API n·∫øu c·∫ßn)
    client = Client("yuntian-deng/ChatGPT")

    return sentence_model, documents, index, client


def build_prompt(chat_context, user_input, document_info):
    """T·∫°o prompt t·ªëi ∆∞u ƒë·ªÉ g·ª≠i ƒë·∫øn m√¥ h√¨nh ChatGPT."""
    initial_context = (
        "B·∫°n l√† m·ªôt tr·ª£ l√Ω th√¥ng minh v√† c√≥ th·ªÉ tr·∫£ l·ªùi c√°c c√¢u h·ªèi ph·ª©c t·∫°p."
        "H√£y tr·∫£ l·ªùi ng∆∞·ªùi d√πng m·ªôt c√°ch ch√≠nh x√°c."
    )

    history = "\n".join(chat_context)

    prompt = (
        f"{initial_context}\n\n"
        f"L·ªãch s·ª≠ h·ªôi tho·∫°i:\n"
        f"{history}\n\n"
        f"Th√¥ng tin t√†i li·ªáu li√™n quan:\n"
        f"{document_info}\n\n"
        f"C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng: {user_input}\n\n"
        "C√¢u tr·∫£ l·ªùi c·ªßa b·∫°n:"
    )

    return prompt


def search_and_predict(user_input, chat_context, model, index, documents, client):
    """T√¨m ki·∫øm t√†i li·ªáu b·∫±ng FAISS + ranking cosine similarity, r·ªìi g·ª≠i truy v·∫•n ƒë·∫øn ChatGPT."""
    chat_context.append(f"User: {user_input}")

    # T·∫°o embedding cho truy v·∫•n
    input_embedding = model.encode([user_input]).astype('float32')

    # T√¨m top-k t√†i li·ªáu t·ª´ FAISS
    k = 10
    D, I = index.search(input_embedding, k)

    # L·∫•y t√†i li·ªáu li√™n quan (l·ªçc nh·ªØng index h·ª£p l·ªá)
    retrieved_docs = [(i, documents[i]) for i in I[0] if i < len(documents)]

    if not retrieved_docs:
        combined_info = "Kh√¥ng t√¨m th·∫•y t√†i li·ªáu n√†o."
    else:
        # T√≠nh ƒëi·ªÉm t∆∞∆°ng ƒë·ªìng cosine gi·ªØa truy v·∫•n v√† t√†i li·ªáu
        retrieved_embeddings = np.array([model.encode([doc]).astype('float32')[0] for _, doc in retrieved_docs])
        similarity_scores = cosine_similarity(input_embedding, retrieved_embeddings)[0]

        # S·∫Øp x·∫øp t√†i li·ªáu theo ƒë·ªô t∆∞∆°ng ƒë·ªìng gi·∫£m d·∫ßn
        sorted_docs = sorted(zip(similarity_scores, retrieved_docs), key=lambda x: x[0], reverse=True)
        top_docs = [doc for _, (_, doc) in sorted_docs[:5]]  # Ch·ªçn 5 t√†i li·ªáu ph√π h·ª£p nh·∫•t

        combined_info = "\n".join(top_docs)

    # X√¢y d·ª±ng prompt
    prompt = build_prompt(chat_context, user_input, combined_info)

    # G·ªçi API ChatGPT
    result = client.predict(
        inputs=prompt,
        top_p=1,
        temperature=1,
        api_name="/predict"
    )

    # L·∫•y c√¢u tr·∫£ l·ªùi t·ª´ m√¥ h√¨nh
    answer = result[0][-1][-1] if len(result) > 0 and len(result[0]) > 0 and len(result[0][-1]) > 0 else "Kh√¥ng t√¨m th·∫•y c√¢u tr·∫£ l·ªùi."
    chat_context.append(f"ChatBot: {answer}")

    return answer


def recognize_speech_from_microphone():
    """Nh·∫≠n di·ªán gi·ªçng n√≥i t·ª´ micro v√† chuy·ªÉn th√†nh text."""
    recognizer = sr.Recognizer()
    microphone = sr.Microphone()

    with microphone as source:
        print("üé§ ƒêang l·∫Øng nghe...")
        recognizer.adjust_for_ambient_noise(source)
        audio = recognizer.listen(source)

    try:
        print("üîç ƒêang nh·∫≠n d·∫°ng gi·ªçng n√≥i...")
        text = recognizer.recognize_google(audio, language='vi-VN')
        print(f"üó£ Ng∆∞·ªùi d√πng n√≥i: {text}")
        return text
    except sr.UnknownValueError:
        print("‚ö† Kh√¥ng th·ªÉ nh·∫≠n di·ªán gi·ªçng n√≥i.")
        return None
    except sr.RequestError:
        print("‚ùå L·ªói k·∫øt n·ªëi v·ªõi d·ªãch v·ª• nh·∫≠n di·ªán gi·ªçng n√≥i.")
        return None


def main():
    """Ch∆∞∆°ng tr√¨nh ch√≠nh: H·ªó tr·ª£ text + gi·ªçng n√≥i."""
    # Kh·ªüi t·∫°o c√°c th√†nh ph·∫ßn
    sentence_model, documents, index, client = initialize_components()

    # Danh s√°ch l∆∞u h·ªôi tho·∫°i
    chat_context = []

    sound_mode = False  # M·∫∑c ƒë·ªãnh ·ªü ch·∫ø ƒë·ªô nh·∫≠p text

    print("ü§ñ Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?")

    while True:
        if sound_mode:
            print("üéô N√≥i ƒëi·ªÅu g√¨ ƒë√≥...")
            user_input = recognize_speech_from_microphone()
            if user_input is None:
                continue
        else:
            user_input = input("üìù B·∫°n: ")

        if user_input.lower() in ["exit", "quit", "tho√°t"]:
            print("üëã T·∫°m bi·ªát!")
            break

        elif user_input.lower() == "mic":
            print("üîä Ch·∫ø ƒë·ªô gi·ªçng n√≥i ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t!")
            sound_mode = True
            continue

        elif user_input.lower() == "text":
            print("‚å® Ch·∫ø ƒë·ªô vƒÉn b·∫£n ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t.")
            sound_mode = False
            continue

        # X·ª≠ l√Ω c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
        if user_input:
            response = search_and_predict(user_input, chat_context, sentence_model, index, documents, client)
            print("ü§ñ ChatBot:", response)


if __name__ == "__main__":
    main()
